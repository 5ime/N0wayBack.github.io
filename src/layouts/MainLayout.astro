---
import Navbar from '../components/Navbar.astro';
import Footer from '../components/Footer.astro';
import logo from '../assets/logo.svg';

interface Props {
  title: string;
  description?: string;
  pageType?: 'index' | 'members' | 'honors';
}

const { 
  title, 
  description = "Official website of N0wayBack Team",
  pageType = 'index'
} = Astro.props as Props;

// 根据页面类型设置不同的加载消息和速度
const loadingMessages: Record<string, string[]> = {
  index: ['SYSTEM INITIALIZATION...', 'LOADING CORE MODULES...', 'ESTABLISHING SECURE CONNECTION...', 'SYSTEM READY'],
  members: ['LOADING TEAM DATA...', 'DECRYPTING PROFILES...', 'TEAM READY'],
  honors: ['RETRIEVING ACHIEVEMENTS...', 'COMPILING RECORDS...', 'DATA READY']
};

const loadingSpeed: Record<string, number> = {
  index: 200, // 较慢
  members: 100, // 较快
  honors: 80 // 最快
};

const messages = loadingMessages[pageType];
const speed = loadingSpeed[pageType];
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content={description} />
    <title>{title} | N0wayBack</title>
    <link rel="icon" type="image/svg+xml" href={logo.src} />
    <link href="https://fonts.googleapis.com/css2?family=Fira+Code:wght@400;500;600;700&family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    
    <script is:inline>
      // 立即执行脚本，避免闪烁
      const getThemePreference = () => {
        if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
          return localStorage.getItem('theme');
        }
        return 'dark'; // 默认使用深色模式，不检查系统偏好
      };
      
      const theme = getThemePreference();
      document.documentElement.classList.toggle('dark', theme === 'dark');
      
      if (typeof localStorage !== 'undefined') {
        localStorage.setItem('theme', theme);
      }
    </script>
    
    <!-- 将页面类型和加载消息传递给JavaScript -->
    <script define:vars={{ pageType, messages, speed }}>
      // 将变量存储在window对象上，以便在DOMContentLoaded事件中使用
      window.pageConfig = {
        pageType: pageType,
        messages: messages,
        speed: speed
      };
    </script>
  </head>
  <body class="bg-primary-light dark:bg-primary-dark text-light-light dark:text-light-dark min-h-screen terminal-boot">
    <!-- 加载动画 -->
    <div id="loading-screen" class="loading-screen">
      <div class="loading-container">
        <div class="loading-logo">N0wayBack</div>
        <div class="loading-bar-container">
          <div class="loading-bar"></div>
        </div>
        <div class="loading-text">{messages[0]}</div>
      </div>
    </div>
    
    <Navbar />
    <main class="fade-in">
      <slot />
    </main>
    <Footer />
    
    <script>
      declare global {
        interface Window {
          pageConfig?: {
            pageType: string;
            messages: string[];
            speed: number;
          }
        }
      }
      
      document.addEventListener('DOMContentLoaded', () => {
        // 从 localStorage 中获取用户的主题选择
        const currentTheme = localStorage.getItem('theme');
        
        // 如果用户设置了主题，使用它
        if (currentTheme === 'dark') {
          document.documentElement.classList.add('dark');
        } else if (currentTheme === 'light') {
          document.documentElement.classList.remove('dark');
        } else {
          // 如果没有设置，默认使用深色模式
          document.documentElement.classList.add('dark');
          localStorage.setItem('theme', 'dark');
        }

        // 获取页面配置
        const { messages, speed } = window.pageConfig || {
          messages: ['LOADING...', 'READY'],
          speed: 200
        };

        // 增强的终端启动效果
        const loadingScreen = document.getElementById('loading-screen');
        const loadingBar = document.querySelector('.loading-bar') as HTMLElement;
        const loadingText = document.querySelector('.loading-text') as HTMLElement;
        
        // 确保元素存在
        if (loadingScreen && loadingBar && loadingText) {
          // 模拟加载进度
          let progress = 0;
          let messageIndex = 0;
          const interval = setInterval(() => {
            progress += Math.random() * 15;
            if (progress >= 100) {
              progress = 100;
              clearInterval(interval);
              
              // 显示完成消息
              loadingText.textContent = messages[messages.length - 1];
              
              // 延迟后隐藏加载屏幕
              setTimeout(() => {
                loadingScreen.classList.add('loaded');
                document.body.classList.add('terminal-booted');
              }, 500);
            }
            
            // 更新加载条
            loadingBar.style.width = `${progress}%`;
            
            // 更新加载消息
            if (progress > 30 && progress < 60 && messageIndex === 0) {
              messageIndex = 1;
              loadingText.textContent = messages[messageIndex];
            } else if (progress >= 60 && progress < 90 && messageIndex === 1 && messages.length > 2) {
              messageIndex = 2;
              loadingText.textContent = messages[messageIndex];
            }
          }, speed);
        }
      });
    </script>
  </body>
</html>

<style is:global>
  :root {
    --selection-bg: rgba(0, 158, 127, 0.3); /* 浅色模式使用更深的颜色 */
    --scrollbar-track: #e5e7eb;
    --scrollbar-thumb: #009e7f; /* 更新为浅色模式的深绿色 */
  }
  
  .dark {
    --selection-bg: rgba(100, 255, 218, 0.2); /* 暗色模式继续使用原来的颜色 */
    --scrollbar-track: #0a192f;
    --scrollbar-thumb: #64ffda; /* 暗色模式继续使用原来的颜色 */
  }
  
  ::selection {
    background-color: var(--selection-bg);
  }
  
  ::-webkit-scrollbar {
    width: 12px;
  }
  
  ::-webkit-scrollbar-track {
    background: var(--scrollbar-track);
  }
  
  ::-webkit-scrollbar-thumb {
    background: var(--scrollbar-thumb);
    border-radius: 6px;
  }
  
  /* 终端启动效果 */
  .terminal-boot::before {
    content: "";
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: #000;
    opacity: 1;
    z-index: 9999;
    transition: opacity 1s ease;
    pointer-events: none;
  }

  .terminal-booted::before {
    opacity: 0;
  }

  .fade-in {
    opacity: 0;
    animation: fadeIn 1s ease forwards;
    animation-delay: 0.5s;
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  /* 加载动画 */
  .loading-screen {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: #000;
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
    transition: opacity 0.5s ease;
  }
  
  .loading-container {
    text-align: center;
    width: 300px;
    padding: 20px;
    border: 1px solid rgba(0, 158, 127, 0.5);
    border-radius: 4px;
    background-color: rgba(0, 0, 0, 0.8);
    box-shadow: 0 0 20px rgba(0, 158, 127, 0.3);
  }
  
  .loading-logo {
    font-family: 'Fira Code', monospace;
    font-size: 28px;
    font-weight: bold;
    color: #fff;
    margin-bottom: 20px;
    text-shadow: 0 0 10px rgba(0, 158, 127, 0.7);
    letter-spacing: 2px;
  }
  
  .loading-bar-container {
    width: 100%;
    height: 10px;
    background: #111;
    border-radius: 5px;
    margin: 0 auto;
    margin-bottom: 20px;
    overflow: hidden;
    border: 1px solid rgba(0, 158, 127, 0.3);
  }
  
  .loading-bar {
    width: 0%;
    height: 100%;
    background: linear-gradient(90deg, #009e7f, #00d6a4);
    border-radius: 5px;
    transition: width 0.2s ease;
    box-shadow: 0 0 10px rgba(0, 158, 127, 0.7);
  }
  
  .loading-text {
    font-family: 'Fira Code', monospace;
    font-size: 16px;
    color: #fff;
    letter-spacing: 1px;
  }
  
  .loaded {
    opacity: 0;
    pointer-events: none;
  }
</style>
