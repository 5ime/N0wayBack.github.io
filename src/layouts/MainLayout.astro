---
import Navbar from '../components/Navbar.astro';
import Footer from '../components/Footer.astro';
import logo from '../assets/logo.svg';

interface Props {
  title: string;
  description?: string;
  pageType?: 'index' | 'members' | 'honors';
  image?: string;
  keywords?: string;
}

const { 
  title, 
  description = "Official website of N0wayBack Team",
  pageType = 'index',
  image = logo.src,
  keywords = "N0wayBack, CTF, Cybersecurity, Hacking, Security Research"
} = Astro.props as Props;

// Set loading messages and speed based on page type
const loadingMessages: Record<string, string[]> = {
  index: ['SYSTEM INITIALIZATION...', 'LOADING CORE MODULES...', 'ESTABLISHING SECURE CONNECTION...', 'SYSTEM READY'],
  members: ['LOADING TEAM DATA...', 'DECRYPTING PROFILES...', 'TEAM READY'],
  honors: ['RETRIEVING ACHIEVEMENTS...', 'COMPILING RECORDS...', 'DATA READY']
};

const loadingSpeed: Record<string, number> = {
  index: 200, // slower
  members: 100, // faster
  honors: 80 // fastest
};

const messages = loadingMessages[pageType];
const speed = loadingSpeed[pageType];

// Website URL
const siteUrl = "https://n0wayback.net";
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content={description} />
    <meta name="keywords" content={keywords} />
    <meta name="author" content="N0wayBack Team" />
    <meta name="robots" content="index, follow" />
    
    <title>{title} | N0wayBack</title>
    <link rel="icon" type="image/svg+xml" href={logo.src} />
    <link href="https://fonts.googleapis.com/css2?family=Fira+Code:wght@400;500;600;700&family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    
    <script is:inline>
      // Immediately invoked script to avoid flicker
      const getThemePreference = () => {
        if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
          return localStorage.getItem('theme');
        }
        return 'dark'; // Default to dark mode, do not check system preference
      };
      
      const theme = getThemePreference();
      document.documentElement.classList.toggle('dark', theme === 'dark');
      
      if (typeof localStorage !== 'undefined') {
        localStorage.setItem('theme', theme);
      }
    </script>
    
    <!-- Pass page type and loading messages to JavaScript -->
    <script define:vars={{ pageType, messages, speed }}>
      // Store variables on the window object for use in the DOMContentLoaded event
      window.pageConfig = {
        pageType: pageType,
        messages: messages,
        speed: speed
      };
    </script>
    
    <!-- Structured data -->
    <script type="application/ld+json">
      {
        "@context": "https://schema.org",
        "@type": "Organization",
        "name": "N0wayBack",
        "url": "https://n0wayback.net",
        "logo": "https://n0wayback.net/logo.svg",
        "description": "Official website of N0wayBack Team",
        "sameAs": [
          "https://github.com/N0wayBack"
        ],
        "mainEntityOfPage": {
          "@type": "WebPage",
          "@id": "https://n0wayback.net"
        }
      }
    </script>
  </head>
  <body class="bg-primary-light dark:bg-primary-dark text-light-light dark:text-light-dark min-h-screen terminal-boot flex flex-col">
    <!-- Loading animation - hidden initially for SEO, shown by JavaScript -->
    <div id="loading-screen" class="loading-screen" style="display: none;">
      <div class="loading-container">
        <div class="loading-logo">N0wayBack</div>
        <div class="loading-bar-container">
          <div class="loading-bar"></div>
        </div>
        <div class="loading-text">{messages[0]}</div>
      </div>
    </div>
    
    <!-- SEO-friendly noscript fallback -->
    <noscript>
      <style>
        .loading-screen { display: none !important; }
        .terminal-boot::before { animation: none !important; }
        .fade-in { opacity: 1 !important; transform: none !important; }
      </style>
    </noscript>
    
    <Navbar />
    <main class="fade-in flex-grow">
      <slot />
    </main>
    <Footer />
    
    <script>
      declare global {
        interface Window {
          pageConfig?: {
            pageType: string;
            messages: string[];
            speed: number;
          }
        }
      }
      
      document.addEventListener('DOMContentLoaded', () => {
        // Get user's theme choice from localStorage
        const currentTheme = localStorage.getItem('theme');
        
        // Use the user's theme if set
        if (currentTheme === 'dark') {
          document.documentElement.classList.add('dark');
        } else if (currentTheme === 'light') {
          document.documentElement.classList.remove('dark');
        } else {
          // Default to dark mode if not set
          document.documentElement.classList.add('dark');
          localStorage.setItem('theme', 'dark');
        }

        // Get page configuration
        const { messages, speed } = window.pageConfig || {
          messages: ['LOADING...', 'READY'],
          speed: 200
        };

        // Show loading screen for human visitors only
        const loadingScreen = document.getElementById('loading-screen');
        if (loadingScreen) {
          loadingScreen.style.display = 'block';
        }

        // Enhanced terminal boot effect
        const loadingBar = document.querySelector('.loading-bar') as HTMLElement;
        const loadingText = document.querySelector('.loading-text') as HTMLElement;
        
        // Ensure elements exist
        if (loadingScreen && loadingBar && loadingText) {
          // Simulate loading progress
          let progress = 0;
          let messageIndex = 0;
          
          // Set a maximum time for the loading animation (3 seconds)
          const maxLoadTime = 3000;
          const startTime = Date.now();
          
          const interval = setInterval(() => {
            const elapsedTime = Date.now() - startTime;
            
            // Ensure animation completes within maxLoadTime
            if (elapsedTime >= maxLoadTime) {
              progress = 100;
            } else {
              progress += Math.random() * 15;
            }
            
            if (progress >= 100) {
              progress = 100;
              clearInterval(interval);
              
              // Display completion message
              loadingText.textContent = messages[messages.length - 1];
              
              // Hide loading screen after a delay
              setTimeout(() => {
                loadingScreen.classList.add('loaded');
                document.body.classList.add('terminal-booted');
              }, 500);
            }
            
            // Update loading bar
            loadingBar.style.width = `${progress}%`;
            
            // Update loading message
            if (progress > 30 && progress < 60 && messageIndex === 0) {
              messageIndex = 1;
              loadingText.textContent = messages[messageIndex];
            } else if (progress >= 60 && progress < 90 && messageIndex === 1 && messages.length > 2) {
              messageIndex = 2;
              loadingText.textContent = messages[messageIndex];
            }
          }, speed);
          
          // Fallback to ensure loading completes even if something goes wrong
          setTimeout(() => {
            if (!document.body.classList.contains('terminal-booted')) {
              loadingScreen.classList.add('loaded');
              document.body.classList.add('terminal-booted');
            }
          }, maxLoadTime + 1000);
        }
      });
    </script>
  </body>
</html>

<style is:global>
  :root {
    --selection-bg: rgba(0, 158, 127, 0.3); /* Light mode uses a deeper color */
    --scrollbar-track: #e5e7eb;
    --scrollbar-thumb: #009e7f; /* Updated to a deeper green for light mode */
  }
  
  .dark {
    --selection-bg: rgba(100, 255, 218, 0.2); /* Dark mode continues to use the original color */
    --scrollbar-track: #0a192f;
    --scrollbar-thumb: #64ffda; /* Dark mode continues to use the original color */
  }
  
  ::selection {
    background-color: var(--selection-bg);
  }
  
  ::-webkit-scrollbar {
    width: 12px;
  }
  
  ::-webkit-scrollbar-track {
    background: var(--scrollbar-track);
  }
  
  ::-webkit-scrollbar-thumb {
    background: var(--scrollbar-thumb);
    border-radius: 6px;
  }
  
  /* Terminal boot effect */
  .terminal-boot::before {
    content: "";
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: #000;
    opacity: 1;
    z-index: 9999;
    transition: opacity 1s ease;
    pointer-events: none;
  }

  .terminal-booted::before {
    opacity: 0;
  }

  .fade-in {
    opacity: 0;
    animation: fadeIn 1s ease forwards;
    animation-delay: 0.5s;
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  /* Loading animation */
  .loading-screen {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: #000;
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
    transition: opacity 0.5s ease;
  }
  
  .loading-container {
    text-align: center;
    width: 300px;
    padding: 20px;
    border: 1px solid rgba(0, 158, 127, 0.5);
    border-radius: 4px;
    background-color: rgba(0, 0, 0, 0.8);
    box-shadow: 0 0 20px rgba(0, 158, 127, 0.3);
  }
  
  .loading-logo {
    font-family: 'Fira Code', monospace;
    font-size: 28px;
    font-weight: bold;
    color: #fff;
    margin-bottom: 20px;
    text-shadow: 0 0 10px rgba(0, 158, 127, 0.7);
    letter-spacing: 2px;
  }
  
  .loading-bar-container {
    width: 100%;
    height: 10px;
    background: #111;
    border-radius: 5px;
    margin: 0 auto;
    margin-bottom: 20px;
    overflow: hidden;
    border: 1px solid rgba(0, 158, 127, 0.3);
  }
  
  .loading-bar {
    width: 0%;
    height: 100%;
    background: linear-gradient(90deg, #009e7f, #00d6a4);
    border-radius: 5px;
    transition: width 0.2s ease;
    box-shadow: 0 0 10px rgba(0, 158, 127, 0.7);
  }
  
  .loading-text {
    font-family: 'Fira Code', monospace;
    font-size: 16px;
    color: #fff;
    letter-spacing: 1px;
  }
  
  .loaded {
    opacity: 0;
    pointer-events: none;
  }
</style>
