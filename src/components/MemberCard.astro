---
interface Props {
  name: string;
  avatar: string; 
  link?: string;
  github?: string;
  bio?: string;
  skills?: string[];
  isLeader?: boolean;
  category?: 'admin' | 'active' | 'pioneers';
  rank?: string;
}

const { name, avatar, link, github, bio, skills = [], isLeader = false, category = 'active' } = Astro.props;

// 处理带有"|"分隔符的名称
const formattedName = name.includes('|') 
  ? name.split('|').map(part => part.trim()).join(' / ') 
  : name;

// 处理GitHub链接和用户名
let githubUsername = '';
let githubUrl = '';

if (github) {
  // 如果github属性包含完整URL
  if (github.includes('github.com/')) {
    // 提取用户名
    githubUsername = github.split('github.com/')[1].split('/')[0];
    githubUrl = github; // 使用原始URL
  } else {
    // 假设它只是用户名
    githubUsername = github;
    githubUrl = `https://github.com/${github}`;
  }
} else if (link && link.includes('github.com/')) {
  // 从link中提取
  githubUsername = link.split('github.com/')[1].split('/')[0];
  githubUrl = link;
}

// 判断是否有链接
const hasLinks = githubUsername || (link && !link.includes('github.com/'));

// 根据category设置不同的样式
let categoryClass = '';
if (category === 'admin') {
  categoryClass = 'border-secondary-light/30 dark:border-secondary-dark/30';
} else if (category === 'pioneers') {
  categoryClass = 'border-yellow-500/30 dark:border-yellow-400/30';
} else {
  categoryClass = 'border-secondary-light/20 dark:border-secondary-dark/20';
}

// 创建一个技能到颜色的映射缓存
const skillColorCache = new Map();

// 预定义一组丰富多样的颜色
const predefinedColors = [
  { h: 0, s: 85, l: 65 },      // 红色
  { h: 15, s: 85, l: 60 },     // 橙红色
  { h: 30, s: 85, l: 60 },     // 橙色
  { h: 45, s: 85, l: 60 },     // 橙黄色
  { h: 60, s: 85, l: 55 },     // 黄色
  { h: 75, s: 70, l: 55 },     // 黄绿色
  { h: 90, s: 65, l: 50 },     // 草绿色
  { h: 120, s: 60, l: 45 },    // 绿色
  { h: 150, s: 65, l: 50 },    // 青绿色
  { h: 180, s: 70, l: 50 },    // 青色
  { h: 195, s: 75, l: 55 },    // 浅蓝色
  { h: 210, s: 80, l: 60 },    // 蓝色
  { h: 225, s: 80, l: 60 },    // 深蓝色
  { h: 240, s: 75, l: 65 },    // 靛蓝色
  { h: 260, s: 75, l: 65 },    // 蓝紫色
  { h: 270, s: 75, l: 65 },    // 紫色
  { h: 285, s: 70, l: 60 },    // 紫红色
  { h: 300, s: 70, l: 60 },    // 粉色
  { h: 315, s: 75, l: 60 },    // 洋红色
  { h: 330, s: 80, l: 55 },    // 深粉色
  { h: 345, s: 80, l: 60 },    // 玫瑰红色
  // 额外的柔和色调
  { h: 20, s: 60, l: 70 },     // 浅橙色
  { h: 40, s: 70, l: 70 },     // 浅黄色
  { h: 80, s: 50, l: 60 },     // 浅绿色
  { h: 140, s: 50, l: 60 },    // 薄荷绿
  { h: 170, s: 60, l: 60 },    // 浅青色
  { h: 190, s: 60, l: 70 },    // 天蓝色
  { h: 220, s: 60, l: 70 },    // 淡蓝色
  { h: 250, s: 60, l: 70 },    // 淡紫色
  { h: 280, s: 50, l: 70 },    // 淡粉紫色
  { h: 320, s: 50, l: 70 },    // 浅粉色
];

// 根据技能名称生成唯一的颜色
function generateColorFromSkill(skill: string) {
  // 检查缓存中是否已有该技能的颜色
  if (skillColorCache.has(skill)) {
    return skillColorCache.get(skill);
  }
  
  // 为每个技能分配一个唯一的颜色索引
  // 使用技能名称的哈希值来确保相同技能总是获得相同颜色
  let hash = 0;
  for (let i = 0; i < skill.length; i++) {
    hash = skill.charCodeAt(i) + ((hash << 5) - hash);
  }
  
  // 确保哈希值为正数
  hash = Math.abs(hash);
  
  // 选择一个预定义的颜色
  const colorIndex = hash % predefinedColors.length;
  const baseColor = predefinedColors[colorIndex];
  
  // 添加一些微小的随机变化，但保持在同一色系
  // 这样可以确保相似的技能名称不会得到完全相同的颜色
  const variationRange = 5; // 较小的变化范围
  const h = baseColor.h + (hash % variationRange) - Math.floor(variationRange / 2);
  const s = Math.min(100, Math.max(30, baseColor.s + (hash % variationRange) - Math.floor(variationRange / 2)));
  const l = Math.min(80, Math.max(30, baseColor.l + (hash % variationRange) - Math.floor(variationRange / 2)));
  
  // 创建颜色对象
  const colorObj = { 
    bgLight: `hsla(${h}, ${s}%, ${l}%, 0.2)`, 
    bgDark: `hsla(${h}, ${s}%, ${Math.max(l-15, 30)}%, 0.25)`,
    borderLight: `hsla(${h}, ${s+10}%, ${l-10}%, 0.3)`,
    borderDark: `hsla(${h}, ${s+10}%, ${Math.max(l-5, 35)}%, 0.35)`
  };
  
  // 将颜色保存到缓存中
  skillColorCache.set(skill, colorObj);
  
  return colorObj;
}

// 确保每个技能都有唯一的颜色
// 预先处理所有技能，防止哈希冲突导致颜色重复
if (skills && skills.length > 0) {
  const usedColorIndices = new Set();
  
  skills.forEach(skill => {
    let hash = 0;
    for (let i = 0; i < skill.length; i++) {
      hash = skill.charCodeAt(i) + ((hash << 5) - hash);
    }
    hash = Math.abs(hash);
    
    let colorIndex = hash % predefinedColors.length;
    let attempts = 0;
    const maxAttempts = predefinedColors.length;
    
    // 如果颜色已被使用，尝试下一个颜色
    while (usedColorIndices.has(colorIndex) && attempts < maxAttempts) {
      colorIndex = (colorIndex + 1) % predefinedColors.length;
      attempts++;
    }
    
    // 标记此颜色已被使用
    usedColorIndices.add(colorIndex);
    
    // 生成并缓存颜色
    const baseColor = predefinedColors[colorIndex];
    const variationRange = 5;
    const h = baseColor.h + (hash % variationRange) - Math.floor(variationRange / 2);
    const s = Math.min(100, Math.max(30, baseColor.s + (hash % variationRange) - Math.floor(variationRange / 2)));
    const l = Math.min(80, Math.max(30, baseColor.l + (hash % variationRange) - Math.floor(variationRange / 2)));
    
    const colorObj = { 
      bgLight: `hsla(${h}, ${s}%, ${l}%, 0.2)`, 
      bgDark: `hsla(${h}, ${s}%, ${Math.max(l-15, 30)}%, 0.25)`,
      borderLight: `hsla(${h}, ${s+10}%, ${l-10}%, 0.3)`,
      borderDark: `hsla(${h}, ${s+10}%, ${Math.max(l-5, 35)}%, 0.35)`
    };
    
    skillColorCache.set(skill, colorObj);
  });
}
---

<div class={`border ${categoryClass} hover:border-secondary-light dark:hover:border-secondary-dark transition-all duration-300 p-4 flex flex-col h-full card-container mx-auto max-w-md`}>
  <div class="flex items-center gap-4 mb-4">
    <div class="w-16 h-16 rounded-sm overflow-hidden border border-secondary-light/40 dark:border-secondary-dark/40">
      <img src={avatar} alt={`${formattedName}'s avatar`} class="w-full h-full object-cover transition-all duration-300" />
    </div>
    
    <div>
      <h3 class="font-mono text-light-light dark:text-light-dark font-bold">{formattedName}</h3>
      <div class="flex flex-col gap-1 mt-1">
        {githubUsername && (
          <a href={githubUrl} target="_blank" rel="noopener noreferrer" class="text-xs text-secondary-light dark:text-secondary-dark hover:underline font-mono">
            <span class="mr-1">~</span>github: @{githubUsername}
          </a>
        )}
        
        {link && !link.includes('github.com/') && (
          <a href={link} target="_blank" rel="noopener noreferrer" class="text-xs text-secondary-light dark:text-secondary-dark hover:underline font-mono">
            <span class="mr-1">~</span>website
          </a>
        )}
      </div>
    </div>
  </div>
  
  {bio ? (
    <div class="mb-4">
      <p class="text-light-light/80 dark:text-light-dark/80 text-sm font-mono">{bio}</p>
    </div>
  ) : (
    <div class={`${hasLinks ? 'mb-4' : 'mb-8'}`}>
      <p class="text-light-light/50 dark:text-light-dark/50 text-xs font-mono">
        <span class="text-secondary-light dark:text-secondary-dark">$</span> cat /team/{name.split('|')[0].trim()}/bio
      </p>
      <p class="text-light-light/50 dark:text-light-dark/50 text-xs font-mono italic mt-1">bio: No such file or directory</p>
    </div>
  )}
  
  <div class="mt-auto">
    {skills && skills.length > 0 && (
      <div class="flex flex-wrap gap-2 pt-2 border-t border-secondary-light/10 dark:border-secondary-dark/10">
        {skills.map((skill) => {
          const colors = generateColorFromSkill(skill);
          return (
            <span 
              class="inline-block px-2 py-0.5 text-xs font-mono border text-light-light/90 dark:text-light-dark/90 skill-tag" 
              style={`--bg-light: ${colors.bgLight}; --bg-dark: ${colors.bgDark}; --border-light: ${colors.borderLight}; --border-dark: ${colors.borderDark};`}
            >
              {skill}
            </span>
          );
        })}
      </div>
    )}
  </div>
</div>

<style>
  .skill-tag {
    background-color: var(--bg-light);
    border-color: var(--border-light);
    transition: transform 0.2s ease;
  }
  
  .skill-tag:hover {
    transform: translateY(-1px);
  }
  
  /* 暗色模式下的技能标签 */
  @media (prefers-color-scheme: dark) {
    .skill-tag {
      background-color: var(--bg-dark);
      border-color: var(--border-dark);
    }
  }
  
  /* 卡片悬停效果 - 添加$指向效果 */
  .card-container {
    position: relative;
    width: 100%;
  }
  
  .card-container::before {
    content: '$';
    position: absolute;
    left: -1.5rem;
    top: 50%;
    transform: translateY(-50%);
    color: var(--secondary-light, #42d392);
    font-family: monospace;
    font-weight: bold;
    font-size: 1.2rem;
    opacity: 0;
    transition: opacity 0.3s ease, transform 0.3s ease;
  }
  
  .card-container:hover::before {
    opacity: 1;
    transform: translateY(-50%) translateX(0.5rem);
  }
  
  @media (prefers-color-scheme: dark) {
    .card-container::before {
      color: var(--secondary-dark, #42d392);
    }
  }
</style>
